{"version":3,"sources":["ebconfig.js","Components/Graph.jsx","App.js","reportWebVitals.js","index.js"],"names":["ebconfig","integration","version","styleConfig","style","arrowheadStyle","createNodes","person","relations","nodes","id","label","name","birthYear","deathYear","labelType","forEach","relation","push","createLinks","links","relative","source","target","config","Graph","props","Query","useEasybase","useState","setPerson","graphInput","setGraphInput","useEffect","a","queryName","tableName","customQuery","promises","map","relationDetails","Promise","all","then","fetchRelations","handleOnClick","e","selectedPersonId","original","options","rankdir","align","ranker","width","height","shape","fitBoundaries","zoomable","onNodeClick","onRelationshipClick","console","log","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6852888.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: Do not edit this file\n\nconst ebconfig = {\n  // \"integration\": \"react-1-Woy-Il4M10v3L0yXByZlwnIrazahiNTmUKXi7MuEdRu7bS27wIqRZ15vxKd9ZrkDCJPGOMZvQ3WdE8o09NP7HESA-b0k5oStSaEXp2YpxZbxOyDo0NJmo1jv\",\n  // \"tt\": \"tt-1-jethzjJ83WmTdRky-PITMuLu5D8-w21f6hRsKpYm3ts=\",\n  // \"version\": \"2020-11-20\"\n  integration: \"project-my-tree-and-me--8NK7JRtrFVLNAuHEA4ZnOAVIYixhzAL\",\n  version: \"2020-11-20\"\n};\n\nexport default ebconfig;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useEasybase } from \"easybase-react\";\nimport \"./Graph.css\";\nimport DagreGraph from \"dagre-d3-react\";\n\nconst styleConfig = {\n  style: \"fill: none; stroke: pink;\",\n  arrowheadStyle: \"display: none\"\n};\n\nconst createNodes = (person, relations) => {\n  const nodes = [\n    {\n      id: person.id,\n      label: `<h3>${person.name}</h3><h4>${person.birthYear} - ${\n        person.deathYear ?? \"\"\n      }</h4>`,\n      labelType: \"html\"\n    }\n  ];\n\n  relations.forEach(relation => {\n    nodes.push({\n      id: relation[\"relation-id\"],\n      label: `<h3>${relation.name}</h3><h4>${relation.birthYear} - ${\n        relation.deathYear ?? \"\"\n      }</h4>`,\n      labelType: \"html\"\n    });\n  });\n\n  return nodes;\n};\n\nconst createLinks = (person, relations) => {\n  const links = [];\n\n  relations.forEach(relative => {\n    if (relative.relation === \"parent\") {\n      links.push({\n        source: relative[\"relation-id\"],\n        target: person.id,\n        config: styleConfig\n      });\n    }\n\n    if (relative.relation === \"child\") {\n      links.push({\n        source: person.id,\n        target: relative[\"relation-id\"],\n        config: styleConfig\n      });\n    }\n  });\n\n  return links;\n};\n\nconst Graph = props => {\n  const { Query } = useEasybase();\n  const [person, setPerson] = useState({\n    id: \"1\",\n    name: \"Michael R.\",\n    birthYear: \"1955\",\n    deathYear: null\n  });\n  const [graphInput, setGraphInput] = useState({});\n\n  useEffect(() => {\n    async function fetchRelations() {\n      const relations = await Query({\n        queryName: \"first-degree-relations\",\n        tableName: \"RELATIONSHIP\",\n        customQuery: { id: person.id }\n      });\n\n      const promises = relations.map(async relation => {\n        const relationDetails = await Query({\n          queryName: \"get-person-by-id\",\n          tableName: \"PERSON\",\n          customQuery: { id: relation[\"relation-id\"] }\n        });\n\n        relation.name = relationDetails[0].name;\n        relation.birthYear = relationDetails[0][\"birth-year\"];\n        relation.deathYear = relationDetails[0][\"death-year\"];\n      });\n\n      Promise.all(promises).then(() => {\n        const nodes = createNodes(person, relations);\n        const links = createLinks(person, relations);\n\n        setGraphInput({ nodes, links });\n      });\n    }\n\n    fetchRelations();\n  }, [Query, person]);\n\n  const handleOnClick = async e => {\n    const selectedPersonId = e?.original?.id;\n    if (selectedPersonId) {\n      const person = await Query({\n        queryName: \"get-person-by-id\",\n        tableName: \"PERSON\",\n        customQuery: { id: selectedPersonId }\n      });\n\n      setPerson({\n        id: person[0].id,\n        name: person[0].name,\n        birthYear: person[0][\"birth-year\"],\n        deathYear: person[0][\"death-year\"]\n      });\n    }\n  };\n\n  if (!graphInput.nodes) {\n    return null;\n  }\n\n  return (\n    <div>\n      <DagreGraph\n        nodes={graphInput.nodes}\n        links={graphInput.links}\n        options={{\n          rankdir: \"TB\",\n          align: \"UL\",\n          ranker: \"tight-tree\"\n        }}\n        width=\"500\"\n        height=\"500\"\n        shape=\"circle\"\n        fitBoundaries\n        zoomable\n        onNodeClick={handleOnClick}\n        onRelationshipClick={e => console.log(e)}\n      />\n    </div>\n  );\n};\n\nexport default Graph;\n","import \"./App.css\";\nimport { EasybaseProvider } from \"easybase-react\";\nimport ebconfig from \"./ebconfig\";\nimport Graph from \"./Components/Graph\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">My Tree and Me</header>\n      <EasybaseProvider ebconfig={ebconfig}>\n        <div className=\"container\">\n          <Graph />\n        </div>\n      </EasybaseProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}